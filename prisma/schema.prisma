generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  password String
  imageUrl String?  
  role MemberRole @default(STUDENT)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Course {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean    @default(false)

  categoryId  String?    @db.ObjectId
  category    Category?  @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  chapters    Chapter[] 
  purchases Purchase[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([categoryId])
  @@fulltext([title])
  
}

model Attachment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String

  courseId  String     @db.ObjectId
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([courseId])
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  courses   Course[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Chapter {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean    @default(false)
  isFree      Boolean    @default(false)

  muxData     MuxData?
  quizzes     Quiz[]

  courseId    String     @db.ObjectId
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([courseId])
}

model MuxData {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  assetId     String
  playbackId  String?

  chapterId   String     @unique @db.ObjectId
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String

  chapterId   String     @db.ObjectId
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean    @default(false)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}


model Purchase {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String

  courseId    String     @db.ObjectId
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @unique
  stripeCustomerId String     @unique

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Logging {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  method    String
  body      String?
  response  String?
  statusCode Int?
  errorMessage String?
  createdAt DateTime @default(now())
}

model Quiz {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  passingScore Int      @default(70) // Percentage required to pass
  isPublished Boolean    @default(false)
  position    Int        @default(0)
  
  chapterId   String     @db.ObjectId
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  questions   Question[]
  attempts    QuizAttempt[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([chapterId])
}

model Question {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  question    String
  type        String     @default("multiple-choice") // "multiple-choice", "true-false", "short-answer"
  points      Int        @default(1)
  position    Int        @default(0)
  explanation String?    // Explanation shown after answering
  
  quizId      String     @db.ObjectId
  quiz        Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  options     QuestionOption[]
  answers     QuizAnswer[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([quizId])
}

model QuestionOption {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  isCorrect   Boolean    @default(false)
  position    Int        @default(0)
  
  questionId  String     @db.ObjectId
  question    Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([questionId])
}

model QuizAttempt {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  score       Float      // Percentage score
  passed      Boolean    @default(false)
  completed   Boolean    @default(false)
  
  quizId      String     @db.ObjectId
  quiz        Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  answers     QuizAnswer[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([quizId])
  @@index([userId])
}

model QuizAnswer {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  answer      String     // Selected option ID or text answer
  isCorrect   Boolean    @default(false)
  
  questionId  String     @db.ObjectId
  question    Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  attemptId   String     @db.ObjectId
  attempt     QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([questionId])
  @@index([attemptId])
  @@index([userId])
}